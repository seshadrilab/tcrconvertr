[{"path":"https://seshadrilab.github.io/tcrconvertr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 tcrconvertr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/TCRconvertR.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Get started","text":"Install CRAN:","code":"install.packages(\"TCRconvertR\")"},{"path":[]},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/TCRconvertR.html","id":"load-tcrs-into-a-data-frame","dir":"Articles","previous_headings":"Basic usage","what":"1. Load TCRs into a data frame","title":"Get started","text":"Examples files may want load: 10X: filtered_contig_annotations.csv Adaptive: Sample_TCRB.tsv IMGT: Output MiXCR tools","code":"library(TCRconvertR)  tcr_file <- get_example_path(\"tenx.csv\") # Using built-in example file tcrs <- read.csv(tcr_file)[c(\"barcode\", \"v_gene\", \"j_gene\", \"cdr3\")] tcrs #>              barcode       v_gene  j_gene            cdr3 #> 1 AAACCTGAGACCACGA-1   TRAV29/DV5  TRAJ12    CAVMDSSYKLIF #> 2 AAACCTGAGACCACGA-1 TRBV20/OR9-2 TRBJ2-1 CASSGLAGGYNEQFF #> 3 AAACCTGAGGCTCTTA-1        TRDV2   TRDJ3 CASSGVAGGTDTQYF #> 4 AAACCTGAGGCTCTTA-1        TRGV9   TRGJ1    CAVKDSNYQLIW"},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/TCRconvertR.html","id":"convert","dir":"Articles","previous_headings":"Basic usage","what":"2. Convert","title":"Get started","text":"Tip: Suppress messages setting verbose = FALSE. Warnings errors still appear. Tip: Adaptive data lacks x_resolved/xMaxResolved columns, create combining x_gene/xGeneName x_allele/xGeneAllele columns. See FAQs.","code":"new_tcrs <- convert_gene(tcrs, frm = \"tenx\", to = \"adaptive\") #> Warning in convert_gene(tcrs, frm = \"tenx\", to = \"adaptive\"): Adaptive only #> captures VDJ genes; C genes will be NA. #> Converting from 10X. Using *01 as allele for all genes. new_tcrs #>              barcode             v_gene        j_gene            cdr3 #> 1 AAACCTGAGACCACGA-1      TCRAV29-01*01 TCRAJ12-01*01    CAVMDSSYKLIF #> 2 AAACCTGAGACCACGA-1 TCRBV20-or09_02*01 TCRBJ02-01*01 CASSGLAGGYNEQFF #> 3 AAACCTGAGGCTCTTA-1      TCRDV02-01*01 TCRDJ03-01*01 CASSGVAGGTDTQYF #> 4 AAACCTGAGGCTCTTA-1      TCRGV09-01*01 TCRGJ01-01*01    CAVKDSNYQLIW"},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/TCRconvertR.html","id":"airr-data","dir":"Articles","previous_headings":"","what":"AIRR data","title":"Get started","text":"Supply standard AIRR gene column names frm_cols:","code":"new_airr <- convert_gene(airr, frm = \"imgt\", to = \"adaptive\",                           frm_cols = c('v_call', 'd_call', 'j_call', 'c_call'))"},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/TCRconvertR.html","id":"custom-column-names","dir":"Articles","previous_headings":"","what":"Custom column names","title":"Get started","text":"default, TCRconvertR assumes column names based input nomenclature (frm): frm = 'imgt' : c('v_gene', 'd_gene', 'j_gene', 'c_gene') frm = 'tenx' : c('v_gene', 'd_gene', 'j_gene', 'c_gene') frm = 'adaptive' : c('v_resolved', 'd_resolved', 'j_resolved') frm = 'adaptivev2' : c('vMaxResolved', 'dMaxResolved', 'jMaxResolved') can override columns using frm_cols: 1. Load 10X data custom column names 2. Specify names using frm_cols convert IMGT","code":"custom_file <- get_example_path(\"customcols.csv\")  custom <- read.csv(custom_file) custom #>   myVgene myDgene myJgene myCgene          myCDR3 antigen #> 1 TRAV1-2   TRBD1  TRAJ12    TRAC    CAVMDSSYKLIF     Flu #> 2 TRBV6-1   TRBD2 TRBJ2-1   TRBC2 CASSGLAGGYNEQFF     Flu #> 3 TRBV6-4   TRBD2 TRBJ2-3   TRBC2 CASSGVAGGTDTQYF     CMV #> 4 TRAV1-2   TRBD1  TRAJ33    TRAC    CAVKDSNYQLIW     CMV #> 5   TRBV2   TRBD1 TRBJ1-2   TRBC1   CASNQGLNYGYTF     CMV custom_new <- convert_gene(   custom,   frm = \"tenx\",   to = \"imgt\",   verbose = FALSE,   frm_cols = c(\"myVgene\", \"myDgene\", \"myJgene\", \"myCgene\"), ) custom_new #>      myVgene  myDgene    myJgene  myCgene          myCDR3 antigen #> 1 TRAV1-2*01 TRBD1*01  TRAJ12*01  TRAC*01    CAVMDSSYKLIF     Flu #> 2 TRBV6-1*01 TRBD2*01 TRBJ2-1*01 TRBC2*01 CASSGLAGGYNEQFF     Flu #> 3 TRBV6-4*01 TRBD2*01 TRBJ2-3*01 TRBC2*01 CASSGVAGGTDTQYF     CMV #> 4 TRAV1-2*01 TRBD1*01  TRAJ33*01  TRAC*01    CAVKDSNYQLIW     CMV #> 5   TRBV2*01 TRBD1*01 TRBJ1-2*01 TRBC1*01   CASNQGLNYGYTF     CMV"},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/TCRconvertR.html","id":"rhesus-or-mouse-data","dir":"Articles","previous_headings":"","what":"Rhesus or mouse data","title":"Get started","text":"Use species = \"rhesus\" species = \"mouse\"","code":"new_tcrs <- convert_gene(   tcrs,   frm = \"tenx\",   to = \"imgt\",   species = \"rhesus\", # or 'mouse'   verbose = FALSE ) #> Warning in convert_gene(tcrs, frm = \"tenx\", to = \"imgt\", species = \"rhesus\", : These genes are not in IMGT for this species and will be replaced with NA: #>  TRAV29/DV5, TRBV20/OR9-2, TRGJ1 new_tcrs #>              barcode   v_gene     j_gene            cdr3 #> 1 AAACCTGAGACCACGA-1     <NA>  TRAJ12*01    CAVMDSSYKLIF #> 2 AAACCTGAGACCACGA-1     <NA> TRBJ2-1*01 CASSGLAGGYNEQFF #> 3 AAACCTGAGGCTCTTA-1 TRDV2*01   TRDJ3*01 CASSGVAGGTDTQYF #> 4 AAACCTGAGGCTCTTA-1 TRGV9*01       <NA>    CAVKDSNYQLIW"},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/contributing.html","id":"reporting-issues","dir":"Articles","previous_headings":"","what":"Reporting Issues","title":"Contributing","text":"report bug request feature please open issue.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/contributing.html","id":"contributing-code","dir":"Articles","previous_headings":"","what":"Contributing Code","title":"Contributing","text":"1. Install suggested dependencies 2. Fork repo make changes Fork repository create branch main. Ensure changes covered tests. Update documentation needed. 3. Run checks GitHub Actions perform linting run package checks tests push changes. can also check code ahead time: 4. ready, open pull request (PR) Include clear description changes. Reference related issues. Make sure checks pass.","code":"install.packages(c(\"knitr\", \"rmarkdown\", \"roxyglobals\", \"testthat\", \"mockery\"))  # Additional packages for running checks locally install.packages(c(\"devtools\", \"covr\", \"styler\")) devtools::load_all()  # Testing devtools::test() devtools::run_examples() covr::package_coverage()  # R CMD check devtools::check()  # Linting and documentation styler::style_pkg() devtools::document()"},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/custom-species.html","id":"create-a-folder-of-imgt-fasta-files","dir":"Articles","previous_headings":"","what":"1. Create a folder of IMGT FASTA files","title":"Using a custom species","text":"simplest way download IMGT. Details: TCRconvertR expects folder containing files ending .fasta .fa headers IMGT format: sequences used, text file containing headers ending .fa also work.","code":">SomeText|TRBV10-1*02|MoreText|..."},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/custom-species.html","id":"run-build_lookup_from_fastas","dir":"Articles","previous_headings":"","what":"2. Run build_lookup_from_fastas()","title":"Using a custom species","text":"species parameter species name ’ll use calling convert_gene(). Details: species also name folder storing lookup tables, characters allowed: / \\ : * ? \" < > | ~ ` \\n \\t","code":"library(TCRconvertR)  # For this example, create a temporary input folder fastadir <- file.path(tempdir(), \"TCRconvertR_tmp\") dir.create(fastadir, showWarnings = FALSE) file.copy(get_example_path(\"fasta_dir/test_trav.fa\"), fastadir) #> [1] TRUE  # Build lookup tables new_lookup_dir <- build_lookup_from_fastas(fastadir, species = \"rabbit\") #> Writing lookup tables to: ~/.local/share/TCRconvertR/rabbit  # Confirm they exist now list.files(new_lookup_dir) #> [1] \"lookup_from_adaptive.csv\" \"lookup_from_tenx.csv\"     #> [3] \"lookup.csv\""},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/faq.html","id":"how-does-tcrconvertr-work","dir":"Articles","previous_headings":"","what":"How does TCRconvertR work?","title":"FAQ","text":"TCRconvertR essentially performs merge input data lookup table includes naming conventions gene. lookup tables constructed IMGT reference FASTA files account specific naming peculiarities platform. built-lookup tables located inst/extdata/. TCRconvert performs merge input data lookup table includes gene names nomenclature. lookup tables constructed IMGT reference FASTA files account specific naming peculiarities platform. built-lookup tables located inst/extdata/. code used build lookup tables, demonstrates conversion logic, within build_lookup_from_fastas function.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/faq.html","id":"what-input-columns-are-required","dir":"Articles","previous_headings":"","what":"What input columns are required?","title":"FAQ","text":"TCRconvertR expects least one V, D, J, /C gene column. can use standard 10X Adaptive column names custom names.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/faq.html","id":"what-if-i-have-missing-genes","dir":"Articles","previous_headings":"","what":"What if I have missing genes?","title":"FAQ","text":"NA values input dataframe remain NA output. Genes found lookup table (based IMGT reference), converted NA. built-lookup tables located inst/extdata/.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/faq.html","id":"are-gamma-delta-tcrs-supported","dir":"Articles","previous_headings":"","what":"Are gamma-delta TCRs supported?","title":"FAQ","text":"Yes, human, mouse, rhesus macaque.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/faq.html","id":"how-are-alleles-added-from-10x-data","dir":"Articles","previous_headings":"","what":"How are alleles added from 10X data?","title":"FAQ","text":"Since 10X provide allele-level information, genes assigned allele *01.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/faq.html","id":"how-are-c-genes-converted-to-adaptive","dir":"Articles","previous_headings":"","what":"How are C genes converted to Adaptive?","title":"FAQ","text":"Adaptive capture constant (“C”) gene information. converting Adaptive format, C genes set NA.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/faq.html","id":"what-column-names-should-i-use-for-my-imgt-formatted-data","dir":"Articles","previous_headings":"","what":"What column names should I use for my IMGT-formatted data?","title":"FAQ","text":"IMGT standard column names, ’s assumed 10X names used: c(v_gene, d_gene, j_gene, c_gene). use names, specify character vector frm_cols.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/faq.html","id":"can-i-input-airr-files","dir":"Articles","previous_headings":"","what":"Can I input AIRR files?","title":"FAQ","text":"Yes, just specify AIRR column names c(v_call, d_call, j_call, c_call) using frm_cols. must still specify input naming convention frm (usually 'imgt').","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/faq.html","id":"what-if-i-have-custom-column-names","dir":"Articles","previous_headings":"","what":"What if I have custom column names?","title":"FAQ","text":"’re using non-standard column names match 10X, Adaptive, Adaptive V2 formats, specify frm_cols.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/faq.html","id":"what-about-odd-names-e-g--trav14dv4-tcrav01-0212-02","dir":"Articles","previous_headings":"","what":"What about odd names (e.g. TRAV14DV4, TCRAV01-02/12-02)?","title":"FAQ","text":"Gene names containing “” “DV” accounted lookup tables. Combinations gene names, like TCRAV01-02/12-02, converted NA IMGT reference.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/faq.html","id":"are-non-human-species-supported","dir":"Articles","previous_headings":"","what":"Are non-human species supported?","title":"FAQ","text":"Mouse rhesus macaque supported ---box. species, see “Using custom reference” usage pages. rhesus mouse lookup tables built IMGT reference FASTAs gene tables. Mouse genes cover “Mouse” “Mouse C57BL/6J” listed IMGT.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/articles/faq.html","id":"what-if-my-adaptive-data-lacks-x_resolvedxmaxresolved-columns","dir":"Articles","previous_headings":"","what":"What if my Adaptive data lacks x_resolved/xMaxResolved columns?","title":"FAQ","text":"Create combining x_gene/xGeneName x_allele/xGeneAllele * separator. Example code:","code":"library(dplyr)  # Adaptive new_df <- adaptive_df %>%   mutate(v_resolved = case_when(     !is.na(v_allele) ~ paste0(v_gene, \"*\", v_allele),     .default = v_gene     ),     d_resolved = case_when(       !is.na(d_allele) ~ paste0(d_gene, \"*\", d_allele),       .default = d_gene     ),     j_resolved = case_when(       !is.na(j_allele) ~ paste0(j_gene, \"*\", j_allele),       .default = j_gene     ))  # Adaptive v2 new_df <- adaptive_df %>%   mutate(vMaxResolved = case_when(     !is.na(vGeneAllele) ~ paste0(vGeneName, \"*\", vGeneAllele),     .default = vGeneName     ),     dMaxResolved = case_when(       !is.na(dGeneAllele) ~ paste0(dGeneName, \"*\", dGeneAllele),       .default = dGeneName     ),     jMaxResolved = case_when(       !is.na(jGeneAllele) ~ paste0(jGeneName, \"*\", jGeneAllele),       .default = jGeneName     ))"},{"path":"https://seshadrilab.github.io/tcrconvertr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emma Bishop. Author, maintainer, copyright holder.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bishop E (2025). TCRconvertR: Convert TCR Gene Names. R package version 1.0, https://github.com/seshadrilab/tcrconvertr.","code":"@Manual{,   title = {TCRconvertR: Convert TCR Gene Names},   author = {Emma Bishop},   year = {2025},   note = {R package version 1.0},   url = {https://github.com/seshadrilab/tcrconvertr}, }"},{"path":"https://seshadrilab.github.io/tcrconvertr/index.html","id":"convert-tcr-gene-names","dir":"","previous_headings":"","what":"Convert TCR Gene Names","title":"Convert TCR Gene Names","text":"TCRconvertR converts V, D, J, /C gene names 10X Genomics, Adaptive Biotechnologies, IMGT nomenclatures. IMGT AIRR Community–recommended standard. supports alpha-beta gamma-delta T cell receptors (TCRs) human, mouse, rhesus macaque. Users can also define custom species, see: vignette(\"custom-species\"). Python version command-line support also available.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Convert TCR Gene Names","text":"TCR annotation tools use different gene naming conventions, making cross-dataset searches difficult (e.g., identifying 10X-annotated TCRs Adaptive data). Manual conversion complex error-prone due inconsistencies naming rules. TCRconvertR automates process efficiently accurately. approach based analyzing multiple 10X Adaptive data sets capture naming variations.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Convert TCR Gene Names","text":"Install latest stable version CRAN: can also install development version GitHub:","code":"install.packages(\"TCRconvertR\") # install.packages(\"pak\") pak::pak(\"seshadrilab/tcrconvertr\")"},{"path":[]},{"path":"https://seshadrilab.github.io/tcrconvertr/index.html","id":"id_1-load-tcrs-into-a-data-frame","dir":"","previous_headings":"Usage","what":"1. Load TCRs into a data frame","title":"Convert TCR Gene Names","text":"Examples files may want load: 10X: filtered_contig_annotations.csv Adaptive: Sample_TCRB.tsv IMGT: Output MiXCR tools","code":"library(TCRconvertR)  tcr_file <- get_example_path(\"tenx.csv\") # Using built-in example file tcrs <- read.csv(tcr_file)[c(\"barcode\", \"v_gene\", \"j_gene\", \"cdr3\")] tcrs #>              barcode       v_gene  j_gene            cdr3 #> 1 AAACCTGAGACCACGA-1   TRAV29/DV5  TRAJ12    CAVMDSSYKLIF #> 2 AAACCTGAGACCACGA-1 TRBV20/OR9-2 TRBJ2-1 CASSGLAGGYNEQFF #> 3 AAACCTGAGGCTCTTA-1        TRDV2   TRDJ3 CASSGVAGGTDTQYF #> 4 AAACCTGAGGCTCTTA-1        TRGV9   TRGJ1    CAVKDSNYQLIW"},{"path":"https://seshadrilab.github.io/tcrconvertr/index.html","id":"id_2-convert","dir":"","previous_headings":"Usage","what":"2. Convert","title":"Convert TCR Gene Names","text":"","code":"new_tcrs <- convert_gene(tcrs, frm = \"tenx\", to = \"adaptive\") #> Warning in convert_gene(tcrs, frm = \"tenx\", to = \"adaptive\"): Adaptive only #> captures VDJ genes; C genes will be NA. #> Converting from 10X. Using *01 as allele for all genes. new_tcrs #>              barcode             v_gene        j_gene            cdr3 #> 1 AAACCTGAGACCACGA-1      TCRAV29-01*01 TCRAJ12-01*01    CAVMDSSYKLIF #> 2 AAACCTGAGACCACGA-1 TCRBV20-or09_02*01 TCRBJ02-01*01 CASSGLAGGYNEQFF #> 3 AAACCTGAGGCTCTTA-1      TCRDV02-01*01 TCRDJ03-01*01 CASSGVAGGTDTQYF #> 4 AAACCTGAGGCTCTTA-1      TCRGV09-01*01 TCRGJ01-01*01    CAVKDSNYQLIW"},{"path":"https://seshadrilab.github.io/tcrconvertr/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Convert TCR Gene Names","text":"Contributions welcome! contribute, submit pull request. See documentation details.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Convert TCR Gene Names","text":"report bug request feature please open issue.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Convert TCR Gene Names","text":"inquiries, contact Emma Bishop: emmab5 uw dot edu.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Convert TCR Gene Names","text":"project supported Fred Hutchinson Cancer Center Translational Data Science Integrated Research Center (TDS IRC) 2024 Data Scientist Collaboration Grant. Special thanks Scott Chamberlain development support Shashidhar Ravishankar gene name curation.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/add_dash_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Add -01 to gene names lacking gene-level info — add_dash_one","title":"Add -01 to gene names lacking gene-level info — add_dash_one","text":"genes just IMGT subgroup (e.g. TRBV2) allele (e.g. *01) designation. Adaptive format always includes IMGT gene (e.g. -01) designation, \"-01\" apparent default. add_dash_one() adds default gene-level designation missing.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/add_dash_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add -01 to gene names lacking gene-level info — add_dash_one","text":"","code":"add_dash_one(gene_str)"},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/add_dash_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add -01 to gene names lacking gene-level info — add_dash_one","text":"gene_str string, gene name.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/add_dash_one.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add -01 to gene names lacking gene-level info — add_dash_one","text":"string, updated gene name.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/add_dash_one.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add -01 to gene names lacking gene-level info — add_dash_one","text":"","code":"add_dash_one(\"TRBV2*01\") #> [1] \"TRBV2-01*01\""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/build_lookup_from_fastas.html","id":null,"dir":"Reference","previous_headings":"","what":"Create lookup tables — build_lookup_from_fastas","title":"Create lookup tables — build_lookup_from_fastas","text":"build_lookup_from_fastas() processes IMGT reference FASTA files given folder generate lookup tables used making gene name conversions. extracts gene names transforms 10X Adaptive formats following predefined conversion rules. resulting files created: lookup.csv: IMGT gene names 10X Adaptive equivalents. lookup_from_tenx.csv: Gene names aggregated 10X identifiers, one representative allele (*01) . lookup_from_adaptive.csv: Adaptive gene names, without alleles gene designations, IMGT 10X equivalents. files stored given subfolder (species) within appropriate application folder via rappdirs. example: MacOS: ~/Library/Application Support/<AppName> Windows: C:\\Documents Settings\\<User>\\Application Data\\Local Settings\\<AppAuthor>\\<AppName> Linux: ~/.local/share/<AppName> folder named species already exists location, replaced.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/build_lookup_from_fastas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create lookup tables — build_lookup_from_fastas","text":"","code":"build_lookup_from_fastas(data_dir, species)"},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/build_lookup_from_fastas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create lookup tables — build_lookup_from_fastas","text":"data_dir string, directory containing FASTA files. species string, name species used running TCRconvert lookup tables.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/build_lookup_from_fastas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create lookup tables — build_lookup_from_fastas","text":"string, path new lookup directory","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/build_lookup_from_fastas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create lookup tables — build_lookup_from_fastas","text":"Key transformations IMGT: 10X: Remove allele information (e.g., *01) modify /DV occurrences. Adaptive: Apply renaming rules, adding gene-level designations zero-padding single-digit numbers. Convert constant genes \"NoData\" (Adaptive captures VDJ) become NA merge convert_gene().","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/build_lookup_from_fastas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create lookup tables — build_lookup_from_fastas","text":"","code":"# For the example, create and use a temporary folder fastadir <- file.path(tempdir(), \"TCRconvertR_tmp\") dir.create(fastadir, showWarnings = FALSE, recursive = TRUE) trav <- get_example_path(\"fasta_dir/test_trav.fa\") trbv <- get_example_path(\"fasta_dir/test_trbv.fa\") file.copy(c(trav, trbv), fastadir) #> [1] TRUE TRUE  # Build lookup tables build_lookup_from_fastas(fastadir, \"rabbit\") #> Writing lookup tables to: ~/.local/share/TCRconvertR/rabbit #> [1] \"~/.local/share/TCRconvertR/rabbit\"  # Clean up temporary folder unlink(fastadir, recursive = TRUE)"},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/choose_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose lookup table — choose_lookup","title":"Choose lookup table — choose_lookup","text":"choose_lookup() determines CSV lookup table use based input format (frm) returns path file.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/choose_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose lookup table — choose_lookup","text":"","code":"choose_lookup(frm, to, species = \"human\", verbose = TRUE)"},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/choose_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose lookup table — choose_lookup","text":"frm string, input format TCR data. Must one \"tenx\", \"adaptive\", \"adaptivev2\", \"imgt\". string, output format TCR data. Must one \"tenx\", \"adaptive\", \"adaptivev2\", \"imgt\". species string, species. Optional; defaults \"human\". verbose boolean, whether show messages. Optional; defaults TRUE","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/choose_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose lookup table — choose_lookup","text":"string, path correct lookup table.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/choose_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choose lookup table — choose_lookup","text":"","code":"choose_lookup(\"imgt\", \"adaptive\") #> [1] \"/home/runner/work/_temp/Library/TCRconvertR/extdata/human/lookup.csv\""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/convert_gene.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert gene names — convert_gene","title":"Convert gene names — convert_gene","text":"convert_gene() converts T-cell receptor (TCR) gene names IMGT, 10X, Adaptive formats. determines columns convert based input format (frm) unless specified user (frm_cols). returns modified version input data frame converted gene names preserving row order.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/convert_gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert gene names — convert_gene","text":"","code":"convert_gene(df, frm, to, species = \"human\", frm_cols = NULL, verbose = TRUE)"},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/convert_gene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert gene names — convert_gene","text":"df dataframe containing TCR gene names. frm string, input format TCR data. Must one \"imgt\", \"tenx\", \"adaptive\", \"adaptivev2\". string, output format TCR data. Must one \"imgt\", \"tenx\", \"adaptive\", \"adaptivev2\". species string,species. Optional; defaults \"human\". frm_cols character vector custom gene column names. Optional; defaults NULL. verbose boolean, whether display messages. Optional; defaults TRUE.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/convert_gene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert gene names — convert_gene","text":"dataframe converted TCR gene names.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/convert_gene.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert gene names — convert_gene","text":"Gene names converted performing merge relevant input columns species-specific lookup table containing IMGT reference genes three formats. Behavioral Notes gene name mapped, replaced NA warning raised. frm 'imgt' frm_cols provided, 10X column names assumed. Constant (C) genes set NA converting Adaptive formats, Adaptive capture constant regions. input need include gene types; partial inputs (e.g., V genes) supported. values custom column can mapped (e.g. CDR3 column) skipped warning raised. Standard Column Names frm_cols provided, column names used present: IMGT: \"v_gene\", \"d_gene\", \"j_gene\", \"c_gene\" 10X: \"v_gene\", \"d_gene\", \"j_gene\", \"c_gene\" Adaptive: \"v_resolved\", \"d_resolved\", \"j_resolved\" Adaptive v2: \"vMaxResolved\", \"dMaxResolved\", \"jMaxResolved\"","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/convert_gene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert gene names — convert_gene","text":"","code":"tcr_file <- get_example_path(\"tenx.csv\") df <- read.csv(tcr_file)[c(\"barcode\", \"v_gene\", \"j_gene\", \"cdr3\")] df #>              barcode       v_gene  j_gene            cdr3 #> 1 AAACCTGAGACCACGA-1   TRAV29/DV5  TRAJ12    CAVMDSSYKLIF #> 2 AAACCTGAGACCACGA-1 TRBV20/OR9-2 TRBJ2-1 CASSGLAGGYNEQFF #> 3 AAACCTGAGGCTCTTA-1        TRDV2   TRDJ3 CASSGVAGGTDTQYF #> 4 AAACCTGAGGCTCTTA-1        TRGV9   TRGJ1    CAVKDSNYQLIW convert_gene(df, \"tenx\", \"adaptive\", verbose = FALSE) #> Warning: Adaptive only captures VDJ genes; C genes will be NA. #>              barcode             v_gene        j_gene            cdr3 #> 1 AAACCTGAGACCACGA-1      TCRAV29-01*01 TCRAJ12-01*01    CAVMDSSYKLIF #> 2 AAACCTGAGACCACGA-1 TCRBV20-or09_02*01 TCRBJ02-01*01 CASSGLAGGYNEQFF #> 3 AAACCTGAGGCTCTTA-1      TCRDV02-01*01 TCRDJ03-01*01 CASSGVAGGTDTQYF #> 4 AAACCTGAGGCTCTTA-1      TCRGV09-01*01 TCRGJ01-01*01    CAVKDSNYQLIW"},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/extract_imgt_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all gene names from a folder of FASTAs — extract_imgt_genes","title":"Extract all gene names from a folder of FASTAs — extract_imgt_genes","text":"extract_imgt_genes() first runs parse_imgt_fasta() FASTA files given folder pull gene names. returns names alphabetically sorted dataframe.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/extract_imgt_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all gene names from a folder of FASTAs — extract_imgt_genes","text":"","code":"extract_imgt_genes(data_dir)"},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/extract_imgt_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all gene names from a folder of FASTAs — extract_imgt_genes","text":"data_dir string, path directory containing FASTA files.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/extract_imgt_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all gene names from a folder of FASTAs — extract_imgt_genes","text":"dataframe gene names.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/extract_imgt_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract all gene names from a folder of FASTAs — extract_imgt_genes","text":"","code":"# Given a folder with FASTA files containing these headers: #   >SomeText|TRAC*01|MoreText| #   >SomeText|TRAV1-1*01|MoreText| #   >SomeText|TRAV1-1*02|MoreText| #   >SomeText|TRAV1-2*01|MoreText| #   >SomeText|TRAV14/DV4*01|MoreText| #   >SomeText|TRAV38-1*01|MoreText| #   >SomeText|TRAV38-2/DV8*01|MoreText| #   >SomeText|TRBV29-1*01|MoreText| #   >SomeText|TRBV29-1*02|MoreText| #   >SomeText|TRBV29/OR9-2*01|MoreText|  fastadir <- get_example_path(\"fasta_dir/\") extract_imgt_genes(fastadir) #>               imgt #> 1          TRAC*01 #> 2       TRAV1-1*01 #> 3       TRAV1-1*02 #> 4       TRAV1-2*01 #> 5    TRAV14/DV4*01 #> 6      TRAV38-1*01 #> 7  TRAV38-2/DV8*01 #> 8      TRBV29-1*01 #> 9      TRBV29-1*02 #> 10 TRBV29/OR9-2*01"},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/get_example_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get full path to an example file or directory — get_example_path","title":"Get full path to an example file or directory — get_example_path","text":"get_example_path() takes file folder name expected located TCRconvertR examples directory gets full path item.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/get_example_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get full path to an example file or directory — get_example_path","text":"","code":"get_example_path(file_name)"},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/get_example_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get full path to an example file or directory — get_example_path","text":"file_name string, name example file directory.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/get_example_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get full path to an example file or directory — get_example_path","text":"string, path example file directory.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/get_example_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get full path to an example file or directory — get_example_path","text":"","code":"# Will probably be in a temp folder for the function example get_example_path(\"tenx.csv\") #> [1] \"/home/runner/work/_temp/Library/TCRconvertR/extdata/examples/tenx.csv\""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/pad_single_digit.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a 0 to single-digit gene-level designation — pad_single_digit","title":"Add a 0 to single-digit gene-level designation — pad_single_digit","text":"pad_single_digit() takes gene name ensures single-digit number following sequence letters padded leading zero. match Adaptive format.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/pad_single_digit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a 0 to single-digit gene-level designation — pad_single_digit","text":"","code":"pad_single_digit(gene_str)"},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/pad_single_digit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a 0 to single-digit gene-level designation — pad_single_digit","text":"gene_str string, gene name.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/pad_single_digit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a 0 to single-digit gene-level designation — pad_single_digit","text":"string, updated gene name.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/pad_single_digit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a 0 to single-digit gene-level designation — pad_single_digit","text":"","code":"pad_single_digit(\"TCRBV1-2\") #> [1] \"TCRBV01-2\""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/parse_imgt_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract gene names from a reference FASTA — parse_imgt_fasta","title":"Extract gene names from a reference FASTA — parse_imgt_fasta","text":"parse_imgt_fasta() extracts second element \"|\"-delimited FASTA header, gene name IMGT reference FASTAs.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/parse_imgt_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract gene names from a reference FASTA — parse_imgt_fasta","text":"","code":"parse_imgt_fasta(infile)"},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/parse_imgt_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract gene names from a reference FASTA — parse_imgt_fasta","text":"infile string, path FASTA file.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/parse_imgt_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract gene names from a reference FASTA — parse_imgt_fasta","text":"character vector gene names.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/parse_imgt_fasta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract gene names from a reference FASTA — parse_imgt_fasta","text":"","code":"# Given a FASTA file containing this header: #   >SomeText|TRBV29-1*01|MoreText| #   >SomeText|TRBV29-1*02|MoreText| #   >SomeText|TRBV29/OR9-2*01|MoreText|  fasta <- get_example_path(\"fasta_dir/test_trbv.fa\") parse_imgt_fasta(fasta) #> [1] \"TRBV29-1*01\"     \"TRBV29-1*02\"     \"TRBV29/OR9-2*01\""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/save_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a lookup table to a CSV file — save_lookup","title":"Save a lookup table to a CSV file — save_lookup","text":"save_lookup() saves data frame CSV file (without row names) specified directory.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/save_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a lookup table to a CSV file — save_lookup","text":"","code":"save_lookup(df, savedir, name)"},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/save_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a lookup table to a CSV file — save_lookup","text":"df data frame containing lookup table data. savedir string, path save directory. name string, file name (end .csv).","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/save_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a lookup table to a CSV file — save_lookup","text":"Nothing","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/save_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a lookup table to a CSV file — save_lookup","text":"","code":"# Create a temp save directory and load an example save_dir <- file.path(tempdir(), \"TCRconvertR_tmp\") dir.create(save_dir, showWarnings = FALSE, recursive = TRUE) dat <- read.csv(get_example_path(\"fasta_dir/lookup.csv\"))  save_lookup(dat, save_dir, \"newlookup.csv\")  # Clean up temporary folder unlink(save_dir, recursive = TRUE)"},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/which_frm_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine input columns to use — which_frm_cols","title":"Determine input columns to use — which_frm_cols","text":"which_frm_cols() determines columns expected hold gene name information input file based input format (frm). returns vector column names.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/which_frm_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine input columns to use — which_frm_cols","text":"","code":"which_frm_cols(df, frm, frm_cols = NULL, verbose = TRUE)"},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/which_frm_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine input columns to use — which_frm_cols","text":"df Dataframe containing TCR gene names. frm string, input format TCR data. Must one \"tenx\", \"adaptive\", \"adaptivev2\", \"imgt\". frm_cols character vector, custom column names use. verbose boolean, whether show messages. Optional; defaults TRUE","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/which_frm_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine input columns to use — which_frm_cols","text":"character vector, column names use.","code":""},{"path":"https://seshadrilab.github.io/tcrconvertr/reference/which_frm_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine input columns to use — which_frm_cols","text":"","code":"tcr_file <- get_example_path(\"tenx.csv\") df <- read.csv(tcr_file) which_frm_cols(df, \"tenx\") #> [1] \"v_gene\" \"d_gene\" \"j_gene\" \"c_gene\""},{"path":"https://seshadrilab.github.io/tcrconvertr/news/index.html","id":"tcrconvertr-10","dir":"Changelog","previous_headings":"","what":"TCRconvertR 1.0","title":"TCRconvertR 1.0","text":"CRAN release: 2025-04-17 Initial CRAN submission.","code":""}]
